/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.cui.mediaplayer;

import android.graphics.drawable.Animatable;
import android.os.Handler;
import java.lang.ref.WeakReference;
import android.os.Message;
import com.tencent.qqmusictv.d.g;
import android.app.Activity;
import android.view.MotionEvent;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.LinearLayout;
import android.support.v4.widget.DrawerLayout;
import android.widget.TextView;
import android.view.View;
import android.widget.SeekBar;
import com.tencent.qqmusictv.ui.view.TvImageView;
import com.tencent.qqmusictv.business.lyricplayeractivity.view.LyricScrollView;
import com.tencent.qqmusictv.ui.view.TvImageViewCarousel;
import android.widget.ListView;
import com.tencent.qqmusictv.ui.view.MarqueeTextView;
import com.tencent.qqmusictv.app.activity.base.BaseActivity;
import com.tencent.qqmusiccommon.util.music.c;
import com.tencent.qqmusictv.business.e.c;
import com.tencent.qqmusictv.ui.view.LyricView;
import com.tencent.qqmusiccommon.util.music.e;
import android.widget.AdapterView;
import com.tencent.qqmusic.innovation.network.b.c;
import com.facebook.drawee.controller.ControllerListener;
import android.os.CountDownTimer;
import android.view.animation.Animation;
import com.tencent.qqmusictv.business.lyricplayeractivity.d.a;
import java.util.ArrayList;
import com.tencent.qqmusictv.business.d.f;
import android.widget.PopupWindow;
import android.graphics.drawable.Drawable;
import com.tencent.qqmusicplayerprocess.songinfo.SongInfo;
import com.tencent.qqmusictv.ui.widget.c;
import com.tencent.qqmusictv.business.userdata.e;
import com.tencent.qqmusiccommon.util.b.c;
import com.tencent.qqmusiccommon.util.music.d;
import com.tencent.qqmusic.innovation.common.a.b;
import java.util.Iterator;
import com.facebook.imagepipeline.core.ImagePipelineFactory;
import com.facebook.imagepipeline.core.ImagePipeline;
import android.net.Uri;
import com.tencent.qqmusicplayerprocess.service.d;
import com.tencent.qqmusiccommon.statistics.ClickStatistics;
import android.content.Intent;
import android.os.Bundle;
import android.view.KeyEvent;
import android.content.Context;
import com.tencent.qqmusic.innovation.common.util.p;
import android.animation.ObjectAnimator;
import android.animation.AnimatorSet;
import android.animation.Animator;
import com.tencent.qqmusictv.ui.animation.c;
import android.animation.TimeInterpolator;
import com.tencent.qqmusiccommon.util.music.MusicPlayList;
import com.tencent.qqmusictv.common.config.b;
import com.tencent.qqmusictv.common.d.a;
import android.widget.ListAdapter;
import java.util.List;
import com.tencent.qqmusictv.business.mvinfo.MvInfo;
import com.tencent.qqmusicsdk.protocol.d;
import com.tencent.qqmusictv.business.d.e;
import com.tencent.qqmusictv.network.request.PlayerBgRequest;
import com.tencent.qqmusic.innovation.network.Network;
import com.tencent.qqmusic.innovation.network.request.CommonRequest;
import android.os.Build;
import android.view.animation.DecelerateInterpolator;
import com.tencent.qqmusiccommon.util.b.b;
import android.content.res.Resources;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import com.tencent.qqmusic.login.manager.UserManager;
import com.tencent.qqmusictv.MusicApplication;
import com.tencent.qqmusic.login.user.LocalUser;
import android.view.ViewStub;
import android.widget.ScrollView;
import android.view.ViewTreeObserver;
import android.graphics.BitmapFactory;
import com.tencent.qqmusictv.business.d.c;
import android.graphics.Bitmap;
import com.tencent.qqmusictv.network.response.model.item.SongOperateItem;
import com.tencent.qqmusictv.business.m.a;
import com.tencent.qqmusic.innovation.common.util.b.d;
import com.tencent.qqmusic.innovation.common.util.b.e;
import com.tencent.qqmusictv.business.d.a;
import com.tencent.qqmusictv.ui.b.e;
import android.util.Pair;
import com.tencent.qqmusictv.business.userdata.songcontrol.a;
import android.view.Window;
import com.tencent.qqmusic.innovation.common.util.o;
import com.tencent.qqmusiccommon.statistics.ExposureStatistics;
import com.tencent.qqmusiccommon.statistics.b;
import com.tencent.qqmusictv.business.lyricplayeractivity.a.a;
import com.facebook.drawee.backends.pipeline.Fresco;

public class PlayerActivity extends BaseActivity implements View.OnClickListener,
        View.OnFocusChangeListener, c, c, LyricView.OnLyricActionListener {
    public static final int BACK_CLICK_MESSAGE = 0xa;
    private static final int BACK_CLICK_TIME = 0x1388;
    private static final int CODE_EXCEEDED_LIMIT = 0x2713;
    public static final String EXTRA_CHANNEL_ID = "extra.CHANNEL_ID";
    public static final String EXTRA_POSITION = "extra.POSITION";
    public static final String EXTRA_SONG = "extra.song";
    private static final int FLIPPER_PLAY_BG_INTERVAL = 0x4e20;
    public static final int HIDE_MINI_PLAY_BAR = 0x7;
    private static final int MAX_PROGRESS_LENGTH = 0x3e8;
    private final int MINI_PLAY_BAR_DISAPPEAR_TIME;
    private static final int PLAY_LIST_ITEM_OFFSET = 0x14;
    public static final int REFRESH_FULL_BTN = 0xb;
    public static final int REFRESH_FULL_BTN_TIME = 0x5dc;
    public static final int REFRESH_PLAY_BG = 0x2;
    public static final int REFRESH_SEEK_BAR = 0x0;
    public static final int REFRESH_TOTAL_TIME = 0x1;
    private static final int SHOW_PAUSE_ICON_MESSAGE = 0x1;
    public static final int SHOW_PLAY_TIPS = 0x9;
    public static final int SHOW_POP_WINDOW = 0x8;
    public static final int SHOW_SET_PLAY_QUALITY_DIALOG = 0x6;
    private static final int SONY_PROTOCOL_OFFSET = 0x1e;
    private static final String TAG = "PlayerActivity";
    private int backFullScreenPressNum;
    e changeInterface;
    TvImageViewCarousel.ImageViewLoadFinishedInterface imageViewLoadFinishedInterface;
    private int inBg;
    private boolean isBackFromMV;
    private boolean isBackToBack;
    private boolean isFirstComing;
    private boolean isFromChannel;
    private boolean isFullScreenShow;
    private boolean isInGuide;
    private boolean isInitUI;
    private boolean isLongClick;
    private boolean isMiniPlayBarShow;
    private boolean isNeedBgOn;
    private boolean isNeedFullScreenBtn;
    private boolean isPause;
    private boolean isPlayListShow;
    private boolean isPlaying;
    private boolean isShouldShowPlayList;
    private boolean isSongQualityDialogShowing;
    private boolean isStop;
    private int lastProgress;
    private LinearLayout lastSelectedView;
    private AdapterView.OnItemSelectedListener listItemListener;
    private AdapterView.OnItemClickListener listListener;
    private c.a listener;
    private TextView mBackBtn;
    private ControllerListener mBgControllerListener;
    private String mBufferingPercent;
    private int mBufferingProgress;
    private long mChannelId;
    private static WeakReference<Activity> mContext;
    private CountDownTimer mCountDownTimer;
    private int mCurrentNum;
    private View mCurrentView;
    DrawerLayout.d mDrawerListener;
    private long mDuration;
    private Animation mFullBufferingAnim;
    private int mLastPlayBgTask;
    private int mListFirstVisibleItem;
    private int mListItemCount;
    private int mListLastVisibleItem;
    private a mLyricLoadInterface;
    private LyricView mLyricView;
    private String mNowTimeText;
    private ArrayList<String> mPlayBgUriList;
    private final Object mPlayBgUriLock;
    private f mPlayerBgPreLoader;
    private PopupWindow mPopupWindow;
    protected boolean mProgressTracking;
    private long mSeekPosition;
    private Drawable mSeekingProgressDrawable;
    private Drawable mSeekingThumbDrawable;
    private TextView mSetNowBtn;
    private SongInfo mSongInfo;
    private long mStartingPosition;
    private LinearLayout mSuperSoundNewGuide;
    private static long mTotalMemory;
    private int mTotalNum;
    private String mTotalTimeText;
    private View.OnHoverListener onHoverListener;
    private Animation operatingAnim;
    private int outBg;
    private PlayerActivity.PlayerHolder playHolder;
    private ArrayList<SongInfo> playList;
    private c playListAdapter;
    private View playView;
    a refreshTimePlayBgHandler;
    b uiControlHandler;
    
    public PlayerActivity() {
        MINI_PLAY_BAR_DISAPPEAR_TIME = 0x1388;
        isInitUI = false;
        isPause = false;
        isStop = false;
        mListFirstVisibleItem = 0x0;
        mListLastVisibleItem = 0x0;
        mListItemCount = 0x0;
        isFullScreenShow = true;
        isBackToBack = false;
        isPlayListShow = false;
        isFirstComing = false;
        mPlayBgUriLock = new Object();
        mLastPlayBgTask = -0x1;
        outBg = 0x0;
        isBackFromMV = false;
        isShouldShowPlayList = true;
        isInGuide = false;
        isMiniPlayBarShow = true;
        mSeekPosition = 0x0;
        isLongClick = false;
        isSongQualityDialogShowing = false;
        mBufferingProgress = 0x0;
        lastProgress = 0x0;
        backFullScreenPressNum = 0x0;
        isNeedBgOn = true;
        isNeedFullScreenBtn = false;
        isPlaying = false;
        isFromChannel = false;
        mCurrentNum = 0x1;
        mDrawerListener = new DrawerLayout.d(this) {
            
            8(PlayerActivity p1) {
            }
            
            public void b(View p1) {
                super.b(p1);
                isPlayListShow = false;
            }
            
            public void a(View p1) {
                super.a(p1);
                isPlayListShow = true;
                if(mPopupWindow != null) {
                    mPopupWindow.dismiss();
                }
            }
        };
        listListener = new AdapterView.OnItemClickListener(this) {
            
            9(PlayerActivity p1) {
            }
            
            public void onItemClick(AdapterView<?> p1, View p2, int p3, long p4) {
                mSongInfo = (SongInfo)playList.get(p3);
                if(mSongInfo == null) {
                    return;
                }
                try {
                    d.c().a(p3, a);
                } catch(Exception localException1) {
                    b.a("PlayerActivity", " E : ", localException1);
                }
                if((playHolder.mDrawerLayout != null) && (playHolder.mDrawerLayout.j(playHolder.drawerRight))) {
                    playHolder.mDrawerLayout.i(playHolder.drawerRight);
                    if((isFullScreenShow) && (!isMiniPlayBarShow)) {
                        playHolder.mFullScreenDefaultFocusView.requestFocus();
                        return;
                    }
                    if(mCurrentView != null) {
                        mCurrentView.requestFocus();
                        return;
                    }
                    playHolder.listG.requestFocus();
                }
            }
        };
        listItemListener = new AdapterView.OnItemSelectedListener(this) {
            
            10(PlayerActivity p1) {
            }
            
            public void onItemSelected(AdapterView<?> p1, View p2, int p3, long p4) {
                if((lastSelectedView != null) && (playListAdapter.b() != null) && (playListAdapter.b().size() > playListAdapter.a()) && (playListAdapter.a() >= 0)) {
                    if(lastSelectedView.getChildAt(0x2).getVisibility() == 0x8) {
                        lastSelectedView.getChildAt(0x0).setVisibility(0x0);
                        lastSelectedView.getChildAt(0x1).setVisibility(0x8);
                        localint1 = lastSelectedView.findViewById(0x7f1202d9);
                        localconst2 = lastSelectedView.findViewById(0x7f1202d7);
                        if((0x7f1202d9 != 0) && (0x7f1202d9 instanceof TextView) && (0x7f1202d7 != null) && (0x7f1202d7 instanceof TextView)) {
                            localArrayList3 = (SongInfo)playListAdapter.b().get(playListAdapter.a());
                            if(playListAdapter.b() != null) {
                                if(playListAdapter.b().au()) {
                                    playListAdapter.b().au() = 0x7f1202d9;
                                    (TextView)playListAdapter.b().au().setTextColor(a.getResources().getColor(0x7f0f014b));
                                    (TextView)playListAdapter.b().au() = 0x7f1202d7;
                                    (TextView)(TextView)playListAdapter.b().au().setTextColor(a.getResources().getColor(0x7f0f014b));
                                } else {
                                    (TextView)0x7f1202d9.setTextColor(a.getResources().getColor(0x7f0f00c8));
                                    (TextView)0x7f1202d7.setTextColor(a.getResources().getColor(0x7f0f00c8));
                                }
                            }
                        }
                    }
                }
                if((p2 != null) && ((LinearLayout)p2.getChildAt(0x0).getVisibility() == 0)) {
                    (LinearLayout)p2.getChildAt(0x0).getVisibility() = p2;
                    (LinearLayout)(LinearLayout)p2.getChildAt(0x0).getVisibility().getChildAt(0x0).setVisibility(0x8);
                    (LinearLayout)(LinearLayout)p2.getChildAt(0x0).getVisibility().getChildAt(0x0) = p2;
                    (LinearLayout)(LinearLayout)(LinearLayout)p2.getChildAt(0x0).getVisibility().getChildAt(0x0).getChildAt(0x1).setVisibility(0x0);
                    localView4 = p2.findViewById(0x7f1202d9);
                    if((0x7f1202d9 != null) && (0x7f1202d9 instanceof TextView)) {
                        (TextView)0x7f1202d9.setTextColor(a.getResources().getColor(0x7f0f00dd));
                    }
                }
                lastSelectedView = p2;
                playListAdapter.a(p3);
            }
            
            public void onNothingSelected(AdapterView<?> p1) {
            }
        };
        mLyricLoadInterface = new a(this) {
            
            11(PlayerActivity p1) {
            }
            
            public void a(b p1, b p2, b p3, int p4) {
                mLyricView.onLoadSuc(p1, p2, p3, p4);
                if(mLyricView.isTranslateLyricShown()) {
                    playHolder.mScrollLyricLine1.setSingeMode(0x0);
                    playHolder.mScrollLyricLine2.setSingeMode(0x0);
                    playHolder.mScrollLyricLine2.setTransSingleLine(true);
                    playHolder.mScrollLyricLine1.setFirstSingleLineLeftStart(false);
                    playHolder.mScrollLyricLine2.setSecondSingleLineRightEnd(false);
                } else {
                    playHolder.mScrollLyricLine2.setTransSingleLine(false);
                    playHolder.mScrollLyricLine1.setSingeMode(0x10);
                    playHolder.mScrollLyricLine2.setSingeMode(0x100);
                    playHolder.mScrollLyricLine1.setFirstSingleLineLeftStart(true);
                    playHolder.mScrollLyricLine2.setSecondSingleLineRightEnd(true);
                }
                playHolder.mScrollLyricLine1.setLyric(p1, p2, p3, p4);
                playHolder.mScrollLyricLine2.setLyric(p1, p2, p3, p4);
            }
            
            public void a(String p1, int p2) {
                String playHolder.mScrollLyricLine2 = "";
                if((p2 == 0x14) || (p2 == 0x32)) {
                    a = a.getSelectedSongInfo();
                    if(a != null) {
                        localString1 = String.format(a.getString(0x7f0b0569), a.w());
                    }
                }
                if((p2 == 0x1e) || (p2 == 0x28) || (p2 == 0x3c)) {
                    playHolder.mScrollLyricLine2.setTransSingleLine(false);
                    playHolder.mScrollLyricLine1.setSingeMode(0x10);
                    playHolder.mScrollLyricLine2.setSingeMode(0x100);
                    playHolder.mScrollLyricLine1.setFirstSingleLineLeftStart(true);
                    playHolder.mScrollLyricLine2.setSecondSingleLineRightEnd(true);
                }
                mLyricView.onLoadOther("", p2);
                playHolder.mScrollLyricLine1.setState(p2);
                playHolder.mScrollLyricLine2.setState(p2);
            }
            
            public void a(ArrayList<a.c> p1) {
            }
            
            public void a(long p1) {
                mLyricView.onLyricSeek(p1);
                playHolder.mScrollLyricLine1.a(p1);
                playHolder.mScrollLyricLine2.a(p1);
            }
            
            public void a(boolean p1) {
                if(p1) {
                    mLyricView.startTimer();
                    playHolder.mScrollLyricLine1.f();
                    playHolder.mScrollLyricLine2.f();
                    return;
                }
                mLyricView.stopTimer();
                playHolder.mScrollLyricLine1.g();
                playHolder.mScrollLyricLine2.g();
            }
        };
        changeInterface = new e(this) {
            
            13(PlayerActivity p1) {
            }
            
            public void progressChanged() {
                a.refreshTimePlayBgHandler.sendEmptyMessage(0x0);
            }
        };
        onHoverListener = new View.OnHoverListener(this) {
            
            14(PlayerActivity p1) {
            }
            
            public boolean onHover(View p1, MotionEvent p2) {
                // :( Parsing error. Please contact me.
            }
        };
        listener = new c.a(this) {
            
            15(PlayerActivity p1) {
            }
            
            public void onSuccess(CommonResponse p1) {
                b.b("PlayerActivity", "play bg info : onSuccess");
                localString1 = p1.g();
                if("play bg info : onSuccess" != null) {
                    if("play bg info : onSuccess" instanceof PlayBgBody) {
                        synchronized(mPlayBgUriLock) {
                            if(mLastPlayBgTask == p1.c()) {
                                if((PlayBgBody)"play bg info : onSuccess".getData() != null) {
                                    b.b("PlayerActivity", "play bg info : get data");
                                    if((mSongInfo != null) && (mSongInfo.n() == g.b((PlayBgBody)"play bg info : onSuccess".getData().getSongid(), -0x1))) {
                                        if((PlayBgBody)"play bg info : onSuccess".getData().getPicurl() != null) {
                                            mPlayBgUriList = (PlayBgBody)"play bg info : onSuccess".getData().getPicurl().getUrl();
                                        } else {
                                            PlayerBgUrlItem localPlayerBgUrlItem2 = anew ArrayList();
                                            mPlayBgUriList = localArrayList3;
                                        }
                                        a.refreshTimePlayBgHandler.sendEmptyMessage(0x2);
                                    }
                                } else {
                                    b.b("PlayerActivity", "play bg info : no data");
                                    a a.refreshTimePlayBgHandler = anew ArrayList();
                                    mPlayBgUriList = localString1;
                                    a.refreshTimePlayBgHandler.sendEmptyMessage(0x2);
                                }
                            }
                        }
                    }
                }
            }
            
            public void onError(int p1, String p2) {
                b.b("PlayerActivity", "play bg info : onError");
                a a.refreshTimePlayBgHandler = anew ArrayList();
                mPlayBgUriList = localArrayList1;
                a.refreshTimePlayBgHandler.sendEmptyMessage(0x2);
            }
        };
        mBgControllerListener = new BaseControllerListener(this) {
            
            16(PlayerActivity p1) {
            }
            
            public void a(String p1, ImageInfo p2, Animatable p3) {
                if(p2 == null) {
                    return;
                }
                if(mPlayerBgPreLoader != null) {
                    mPlayerBgPreLoader = 0x0;
                    try {
                        mPlayerBgPreLoader = d.c().z();
                    } catch(Exception localException1) {
                        b.a("PlayerActivity", " E : ", localException1);
                    }
                    mPlayerBgPreLoader.a(mPlayerBgPreLoader);
                }
            }
        };
        imageViewLoadFinishedInterface = new TvImageViewCarousel.ImageViewLoadFinishedInterface(this) {
            
            17(PlayerActivity p1) {
            }
            
            public void onFinalImageSet(String p1, ImageInfo p2, Animatable p3) {
                if(p2 == null) {
                    return;
                }
                if(mPlayerBgPreLoader != null) {
                    mPlayerBgPreLoader = 0x0;
                    try {
                        mPlayerBgPreLoader = d.c().z();
                    } catch(Exception localException1) {
                        b.a("PlayerActivity", " E : ", localException1);
                    }
                    mPlayerBgPreLoader.a(mPlayerBgPreLoader);
                }
            }
        };
        uiControlHandler = new b(this, 0x0);
        refreshTimePlayBgHandler = new a(this, 0x0);
        mCountDownTimer = new CountDownTimer(this, 0x9c40, 0x32) {
            
            20(PlayerActivity p1, long p2, long p3) {
                // :( Parsing error. Please contact me.
            }
            
            public void onTick(long p1) {
                TextView playHolder.mFullScreenBufferingProgress = 0x1;
                mBufferingProgress = (playHolder.mFullScreenBufferingProgress + mBufferingProgress);
                if(mBufferingProgress > 0x63) {
                    mBufferingProgress = 0x63;
                }
                playHolder.mFullScreenBufferingProgress.setText(mBufferingProgress + "%");
            }
            
            public void onFinish() {
            }
        };
    }
    public static String PLAYER_TYPE = "playType";
    public static String PLAY_SONG = "playSong";
    public static int RADIO_PLAYER = 0x3e8;
    public static int SONG_LIST_PLAYER = 0x3e9;
    public static int MINIBAR_PLAYER = 0x3ea;
    public static int GUESS_LIKE_PLAYER = 0x3eb;
    public static int SEARCH_PLAYER = 0x3ec;
    public static int APP_STARTER = 0x3ed;
    public static int APP_FAKE_STARTER = 0x3ee;
    public static int SONG_LIST_PLAYER_REPEAT = 0x3f3;
    public static int SEARCH_PLAYER_REPEAT = 0x3f6;
    public static int APP_START_SEARCH_PLAYER = 0x3f6;
    public static int playType = SONG_LIST_PLAYER;
    
    public void updateMusicPlayEvent(int p1) {
        receiveBroadcast(p1);
    }
    
    public void onCreate(Bundle p1) {
        super.onCreate(p1);
        mContext = new WeakReference(this);
        getWindow().addFlags(0x80);
        b.b("PlayerActivity", "onCreate start");
        if(!initUI()) {
            return;
        }
        mTotalMemory = o.f();
        initFilter();
        setContentView(playView);
        playView = getIntent();
        isBackToBack = playView.getBooleanExtra("mb", false);
        isFirstComing = playView.getBooleanExtra("is_first_comming", false);
        handleIntent(getIntent());
        ExposureStatistics localString1 = new ExposureStatistics(0x4a39, true);
        b.a().a(0x4);
        b.b("PlayerActivity", "onCreate finish isBackToBack : " + isBackToBack);
    }
    
    protected void onStart() {
        b.b("PlayerActivity", "onStart()");
        super.onStart();
        if(!isInitUI) {
            return;
        }
        initData();
        try {
            d.c().a(changeInterface);
        } catch(Exception localException1) {
            b.a("PlayerActivity", " E : ", localException1);
        }
        isStop = false;
    }
    
    protected void onResume() {
        b.b("PlayerActivity", "onResume");
        super.onResume();
        if(!isInitUI) {
            return;
        }
        if(isPause) {
            setMode();
        }
        try {
            mLyricView.forceToPlayLine();
            mLyricView.onStart();
        } catch(Exception localException1) {
            b.a("PlayerActivity", localException1);
        }
        isPause = false;
        refreshSeekBarAndTime();
        refreshPlayBtn();
        if(mSongInfo != null) {
            try {
                mLyricView.clearLyricContentView();
            } catch(Exception localException2) {
                b.a("PlayerActivity", localException2);
            }
        }
        refreshUI();
        mLyricView.setNeedRefreshLyricByActivityStatus(true);
        if(isBackFromMV) {
            if(isMiniPlayBarShow) {
                playHolder.playMV.requestFocus();
            }
            isBackFromMV = false;
            if(isPlaying) {
                try {
                    d.c().q();
                } catch(Exception localException3) {
                    b.a("PlayerActivity", " E : ", localException3);
                }
            }
        }
        if((isFullScreenShow) && (isMiniPlayBarShow)) {
            if(d.b()) {
                b.b("PlayerActivity", ">>>>>1");
                uiControlHandler.removeMessages(0x7);
                uiControlHandler.sendEmptyMessage(0x7);
            } else {
                b.b("PlayerActivity", ">>>>>2");
                uiControlHandler.removeMessages(0x1);
                uiControlHandler.sendEmptyMessage(0x1);
            }
        }
        if((a.a().Q()) && (!b.c())) {
            showBackgroundPlayTips();
        }
    }
    
    private void showBackgroundPlayTips() {
        try {
            b TimeUnit.SECONDS = new b(this, getResources().getString(0x7f0b0087), getResources().getString(0x7f0b0089), getResources().getString(0x7f0b0088), 0x0);
            TimeUnit.SECONDS.a(new b.a(this, TimeUnit.SECONDS) {
                
                1(PlayerActivity p1, b p2) {
                }
                
                public void a() {
                    a.dismiss();
                }
                
                public void b() {
                    a.dismiss();
                }
                
                public void c() {
                    a.dismiss();
                }
            });
            TimeUnit.SECONDS.show();
            localPlayerActivity.11 = Executors.newSingleThreadScheduledExecutor();
            new b.a(this, TimeUnit.SECONDS) {
                
                1(PlayerActivity p1, b p2) {
                }
                
                public void a() {
                    a.dismiss();
                }
                
                public void b() {
                    a.dismiss();
                }
                
                public void c() {
                    a.dismiss();
                }
            }.schedule(new PlayerActivity.12(this, TimeUnit.SECONDS), 0xf, TimeUnit.SECONDS);
            return;
        } catch(Exception localException2) {
            b.a("PlayerActivity", localException2);
        }
    }
    
    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        b.b("PlayerActivity", "onAttachedToWindow");
        if(isInitUI) {
            showPopWindowTips();
        }
    }
    
    protected void onPause() {
        b.b("PlayerActivity", "onPause");
        if(isInitUI) {
            isPause = true;
            mLyricView.onStop();
            mLyricView.setPlayerActivityPause(true);
            mLyricView.setNeedRefreshLyricByActivityStatus(false);
        }
        super.onPause();
    }
    
    public boolean initUI() {
        // :( Parsing error. Please contact me.
    }
    
    private void initData() {
        try {
            mSongInfo = d.c().j();
            if(d.c().k() != null) {
                playList = d.c().k().f();
                playListAdapter.a(playList);
            }
        } catch(Exception localException1) {
            b.a("PlayerActivity", " E : ", localException1);
        }
        if(mSongInfo != null) {
            playHolder.songName.setText(mSongInfo.w());
            playHolder.singerName.setText(" \u4e00 " + mSongInfo.y() + " \u4e00 ");
            if(e.e().a(mSongInfo.n())) {
                playHolder.likeR.setImageResource(0x7f020125);
            } else {
                playHolder.likeR.setImageResource(0x7f020123);
            }
            if(!b.a()) {
                if((mSongInfo.V()) && (!a.a().m())) {
                    playHolder.playMV.setVisibility(0x0);
                } else {
                    playHolder.playMV.setVisibility(0x4);
                } else {
                    playHolder.playMV.setVisibility(0x4);
                } else {
                    b.b("PlayerActivity", "mSongInfo == null when initData");
                }
            }
        }
        playHolder.playlist.setAdapter(playListAdapter);
        b.b("PlayerActivity", "initData playType : " + playType);
        if((playType == RADIO_PLAYER) || (playType == GUESS_LIKE_PLAYER)) {
            isShouldShowPlayList = false;
            playHolder.circleG.setVisibility(0x8);
            playHolder.listG.setVisibility(0x8);
            playHolder.deleteG.setVisibility(0x0);
            return;
        }
        isShouldShowPlayList = true;
        playHolder.circleG.setVisibility(0x0);
        playHolder.listG.setVisibility(0x0);
        playHolder.deleteG.setVisibility(0x8);
    }
    
    private void initFilter() {
        try {
            d.c().a(this);
        } catch(Exception localException1) {
            b.a("PlayerActivity", " E : ", localException1);
        }
        e.e().a(this);
        playHolder.nextG.setOnFocusChangeListener(this);
        playHolder.nextG.setOnHoverListener(onHoverListener);
        playHolder.frontG.setOnFocusChangeListener(this);
        playHolder.frontG.setOnHoverListener(onHoverListener);
        playHolder.likeR.setOnFocusChangeListener(this);
        playHolder.likeR.setOnHoverListener(onHoverListener);
        playHolder.listG.setOnFocusChangeListener(this);
        playHolder.listG.setOnHoverListener(onHoverListener);
        playHolder.circleG.setOnFocusChangeListener(this);
        playHolder.circleG.setOnHoverListener(onHoverListener);
        playHolder.deleteG.setOnFocusChangeListener(this);
        playHolder.deleteG.setOnHoverListener(onHoverListener);
        playHolder.mSuspend.setOnFocusChangeListener(this);
        playHolder.mSuspend.setOnHoverListener(onHoverListener);
        playHolder.mSuspend.setOnClickListener(this);
        playHolder.mFullScreenBtn.setOnHoverListener(onHoverListener);
        playHolder.mFullScreenBtn.setOnFocusChangeListener(this);
        playHolder.playMV.setOnHoverListener(onHoverListener);
        playHolder.playMV.setOnFocusChangeListener(this);
        playHolder.startG.setOnHoverListener(onHoverListener);
        playHolder.startG.setOnFocusChangeListener(this);
        playHolder.frontG.setOnHoverListener(onHoverListener);
        playHolder.frontG.setOnFocusChangeListener(this);
    }
    
    public void initPlayBg() {
        if((mSongInfo == null) || (!isNeedBgOn)) {
            playHolder.mTvImageViewCarousel.setVisibility(0x8);
            return;
        }
        if((mPlayBgUriList == null) || (mPlayBgUriList.size() == 0)) {
            playHolder.playBg.setVisibility(0x0);
            playHolder.mTvImageViewCarousel.setVisibility(0x8);
            a.a().a(this, mSongInfo, 0x7f0201ff, 0x2, 0x4);
            e.a().a(e.a(mSongInfo.n()), new ArrayList());
            playHolder.mTvImageViewCarousel.setUriList(mPlayBgUriList);
            return;
        }
        displayBriefMemory();
        e.a().a(e.a(mSongInfo.n()), mPlayBgUriList);
        ImagePipelineFactory.getInstance().getImagePipeline().clearMemoryCaches();
        clearBGMemoryCache();
        playHolder.playBg.setVisibility(0x8);
        playHolder.mTvImageViewCarousel.setVisibility(0x0);
        playHolder.mTvImageViewCarousel.setUriList(mPlayBgUriList);
    }
    
    public void onClick(View p1) {
        // :( Parsing error. Please contact me.
    }
    
    private void playMV() {
        // :( Parsing error. Please contact me.
    }
    
    protected void doFavorOperation(boolean p1) {
        ClickStatistics localb1 = new ClickStatistics(0x25ac);
        0x25ac = 0x0;
        try {
            0x25ac = d.c().j();
        } catch(Exception localException2) {
            b.a("PlayerActivity", " E : ", localException2);
        }
        if(0x25ac == null) {
            return;
        }
        if((UserManager)UserManager.Companion.getInstance(MusicApplication.getContext()).getUser() != null) {
            if(0x25ac.aH()) {
                addOrDelMyFav(0x25ac, p1);
                return;
            }
            if(p1) {
                showNeedPayDialog(0x25ac);
                return;
            }
            addOrDelMyFav(0x25ac, p1);
            return;
        }
        b localb1 = new b(this, getResources().getString(0x7f0b09e9), 0x0);
        localb1.a(new b.a(this, localb1) {
            
            30(PlayerActivity p1, b p2) {
            }
            
            public void a() {
                Intent a = new Intent();
                a.setClass(b, LoginActivity.class);
                Bundle b = new Bundle();
                b.putInt("backtype", 0x2);
                a.putExtras(b);
                b.startActivityForResult(a, 0x3);
                a.dismiss();
            }
            
            public void b() {
                a.dismiss();
            }
            
            public void c() {
            }
        });
        localb1.show();
    }
    
    private void frontClick() {
        ClickStatistics playHolder.startG = new ClickStatistics(0x25a9);
        playHolder.bufferingLayout.setVisibility(0x8);
        playHolder.startG.setVisibility(0x0);
        prevPlay();
    }
    
    private void nextClick() {
        ClickStatistics playHolder.startG = new ClickStatistics(0x25aa);
        playHolder.bufferingLayout.setVisibility(0x8);
        playHolder.startG.setVisibility(0x0);
        backPlay();
    }
    
    public void doPlayMode(int p1) {
        b.b("MusicPlayer", "doPlayMode " + p1);
        switch(p1) {
            case 103:
            {
                playHolder.circleG.setImageResource(0x7f020066);
                break;
            }
            case 101:
            {
                playHolder.circleG.setImageResource(0x7f0201e1);
                break;
            }
            case 104:
            case 105:
            {
                playHolder.circleG.setImageResource(0x7f0201da);
                break;
            }
            case 102:
            {
                break;
            }
        }
    }
    
    private void playClick() {
        ClickStatistics localBoolean1 = new ClickStatistics(0x25a8);
        playHolder.startG = playHolder.startG.getTag();
        if(playHolder.startG != null) {
            setPlay(Boolean.valueOf((!(Boolean)playHolder.startG.booleanValue())));
            return;
        }
        setPlay(Boolean.valueOf(true));
    }
    
    private void initPlayListFocus() {
        if(lastSelectedView != null) {
            playHolder.playlist.post(new Runnable(this) {
                
                31(PlayerActivity p1) {
                }
                
                public void run() {
                    try {
                        playHolder.playlist.requestFocusFromTouch();
                        playHolder.playlist.setSelectionFromTop(d.c().f(), a);
                        return;
                        lastSelectedView.getHeight() = lastSelectedView.getHeight() + 0x14;
                    } catch(Exception localException1) {
                        b.a("PlayerActivity", " E : ", localException1);
                    }
                }
            });
            return;
        }
        playHolder.playlist.post(new Runnable(this) {
            
            32(PlayerActivity p1) {
            }
            
            public void run() {
                try {
                    playHolder.playlist.requestFocusFromTouch();
                    playHolder.playlist.setSelection(d.c().f());
                    return;
                } catch(Exception localException1) {
                    b.a("PlayerActivity", " E : ", localException1);
                }
            }
        });
    }
    
    private void listClick() {
        ClickStatistics isFullScreenShow = new ClickStatistics(0x25ae);
        mCurrentView = playHolder.listG;
        playHolder.mDrawerLayout.h(playHolder.drawerRight);
        initPlayListFocus();
        if(isFullScreenShow) {
            hideMiniPlayBarLayout();
        }
    }
    
    public void deleteSong() {
        c.a(this, 0x0, 0x7f0b0640);
        if(mSongInfo != null) {
            d.a().a(new e.a(this) {
                
                33(PlayerActivity p1) {
                }
                
                public Void b(e.b p1) {
                    try {
                        d.c().a(mSongInfo);
                    } catch(Exception localException1) {
                        b.a("PlayerActivity", " E : ", localException1);
                    }
                    return null;
                }
            });
        }
    }
    
    public void setPlay(Boolean p1) {
        // :( Parsing error. Please contact me.
    }
    
    private void switchScreen() {
        if(isFullScreenShow) {
            exitFullscreen();
            return;
        }
        showFullscreen();
    }
    
    private void goSetClick() {
        Intent localIntent1 = new Intent();
        localIntent1.setClass(this, SettingActivity.class);
        Bundle localBundle2 = new Bundle();
        localBundle2.putInt("first_tab", 0x1);
        localBundle2.putInt("tab_first", 0x4);
        localIntent1.putExtras(localBundle2);
        startActivity(localIntent1);
        closeSuperSoundNewGuide();
    }
    
    private void goSetBackgroundPlay() {
        Intent localIntent1 = new Intent();
        localIntent1.setClass(this, SettingActivity.class);
        Bundle localBundle2 = new Bundle();
        localBundle2.putInt("first_tab", 0x1);
        localBundle2.putInt("tab_first", 0x5);
        localIntent1.putExtras(localBundle2);
        startActivity(localIntent1);
    }
    
    private void backClick() {
        closeSuperSoundNewGuide();
    }
    
    public void onFocusChange(View p1, boolean p2) {
        switch(p1.getId()) {
            case 2131886685:
            {
                changeImage(p2, playHolder.likeR);
                break;
            }
            case 2131886677:
            {
                changeImage(p2, playHolder.frontG);
                break;
            }
            case 2131886683:
            {
                changeImage(p2, playHolder.nextG);
                break;
            }
            case 2131886686:
            {
                changeImage(p2, playHolder.circleG);
                break;
            }
            case 2131886688:
            {
                changeImage(p2, playHolder.listG);
                break;
            }
            case 2131886687:
            {
                changeImage(p2, playHolder.deleteG);
                break;
            }
            case 2131886682:
            {
                if(p2) {
                    playHolder.buffering.setImageDrawable(getResources().getDrawable(0x7f02005e));
                    break;
                }
                playHolder.buffering.setImageDrawable(getResources().getDrawable(0x7f02005f));
                break;
            }
            case 2131886678:
            {
                changeImage(p2, playHolder.mFullScreenBtn);
                break;
            }
            case 2131886684:
            {
                changeImage(p2, playHolder.playMV);
                break;
            }
            case 2131886679:
            case 2131886680:
            case 2131886681:
            {
                break;
            }
        }
    }
    
    private void changeImage(boolean p1, ImageView p2) {
        if(p1) {
            p2.setScaleX(1.1f);
            p2.setScaleY(1.1f);
        } else {
            p2.setScaleX(0.0f);
            p2.setScaleY(0.0f);
        }
        if(p1) {
            mCurrentView = p2;
        }
        if((isFullScreenShow) && (isMiniPlayBarShow)) {
            uiControlHandler.removeMessages(0x7);
            uiControlHandler.sendEmptyMessageDelayed(0x7, 0x1388);
        }
    }
    
    protected SongInfo getSelectedSongInfo() {
        int localconst/41 = 0x0;
        try {
            return d.c().j();
        } catch(Exception localException2) {
            b.a("PlayerActivity", " E : ", localException2);
        }
        return localconst/41;
    }
    
    private void backPlay() {
        try {
            d.c().u();
            return;
        } catch(Exception localException1) {
            b.a("PlayerActivity", " E : ", localException1);
        }
    }
    
    private void prevPlay() {
        try {
            d.c().v();
            return;
        } catch(Exception localException1) {
            b.a("PlayerActivity", " E : ", localException1);
        }
    }
    
    public void setPlayButton(Boolean p1) {
        try {
            if(p1.booleanValue()) {
                playHolder.startG.setTag(Boolean.valueOf(true));
                playHolder.startG.setImageResource(0x7f0201a8);
                return;
            }
            playHolder.startG.setImageResource(0x7f0201b4);
            playHolder.startG.setTag(Boolean.valueOf(false));
            return;
        } catch(Exception localString1) {
            b.d("PlayerActivity", "setPlayButton error:" + localString1.getMessage());
        }
    }
    
    private int switchPlayMode() {
        setNextMode();
        return doPlayMode(false);
    }
    
    private void setMode() {
        try {
            locald1 = d.c().h();
            doPlayMode(d.c());
            return;
        } catch(Exception localString2) {
            b.d("PlayerActivity", "setMode error:" + localString2.getMessage());
        }
    }
    
    private void setNextMode() {
        // :( Parsing error. Please contact me.
    }
    
    private int doPlayMode(boolean p1) {
        try {
            if(d.a()) {
                locald1 = d.c().h();
                switch(d.c()) {
                    case 103:
                    {
                        if(p1) {
                            showToast(-0x1, 0x7f0b0586);
                        }
                        case 101:
                        {
                            if(p1) {
                                showToast(-0x1, 0x7f0b0587);
                            }
                            case 105:
                            {
                                if(p1) {
                                    showToast(-0x1, 0x7f0b058a);
                                }
                            }
                        } catch(Exception locald1) {
                            b.b("PlayerActivity", "doPlayMode error:" + locald1.getMessage());
                        }
                        
                    }
                }
            }
            case 102:
            case 104:
            {
                return d.a()
                d.a() = true;
                break;
            }
        }
    }
    
    private void showNeedPayDialog(SongInfo p1) {
        if(p1.an() > 0) {
            b.b("PlayerActivity", "showNeedPayDialog ---->1");
            "PlayerActivity" = 0x7f0b0959;
        } else if(p1.ak() > 0) {
            b.b("PlayerActivity", "showNeedPayDialog ---->2");
            "PlayerActivity" = 0x7f0b095a;
        } else {
            b.b("PlayerActivity", "showNeedPayDialog ---->3");
            "PlayerActivity" = 0x7f0b00cf;
        }
        b localb1 = new b(this, getResources().getString(p1.ak()), 0x1);
        localb1.a(new b.a(this, localb1) {
            
            2(PlayerActivity p1, b p2) {
            }
            
            public void a() {
                a.dismiss();
            }
            
            public void b() {
                a.dismiss();
            }
            
            public void c() {
            }
        });
        localb1.show();
    }
    
    private void refreshUI() {
        refreshTimePlayBgHandler.removeCallbacksAndMessages(0x0);
        if(mSongInfo == null) {
            b.d("PlayerActivity", "songinfo is NULL!!");
            return;
        }
        b.b("PlayerActivity", "current song is:" + mSongInfo.w());
        playHolder.songName.setText(mSongInfo.w());
        playHolder.singerName.setText(" \u4e00 " + mSongInfo.y() + " \u4e00 ");
        if(isNeedBgOn) {
            locale1 = e.a().a(e.a(mSongInfo.n()));
            if(e.a() == null) {
                b.b("PlayerActivity", "play bg info : PlayerBgRequest");
                PlayerBgRequest localint2 = new PlayerBgRequest(mSongInfo.n() + "", mSongInfo.R() + "", mSongInfo.u());
                mLastPlayBgTask = Network.a().a(localint2, listener);
            } else {
                b.b("PlayerActivity", "play bg info : picUrlList" + e.a().size());
                synchronized(mPlayBgUriLock) {
                    mPlayBgUriList = e.a();
                    refreshTimePlayBgHandler.sendEmptyMessage(0x2);
                }
            }
        }
        refreshTotalTime();
        refreshLikeIcon();
        if(!b.a()) {
            if((mSongInfo.V()) && (!a.a().m())) {
                playHolder.playMV.setVisibility(0x0);
            } else {
                playHolder.playMV.setVisibility(0x4);
            } else {
                playHolder.playMV.setVisibility(0x4);
            }
        }
        playListAdapter.notifyDataSetChanged();
    }
    
    private void showFullscreen() {
        if((isFullScreenShow) || (playHolder == null)) {
            return;
        }
        isFullScreenShow = true;
        playHolder.mScrollLyric.setVisibility(0x8);
        playHolder.mTowLyricLayout.setVisibility(0x0);
        playHolder.mTopMask.setVisibility(0x0);
        playHolder.mFullScreenBtn.setImageResource(0x7f020092);
        if(d.e()) {
            openFullScreenBuffering();
        } else if((d.d()) && (!isMiniPlayBarShow)) {
            uiControlHandler.removeMessages(0x1);
        }
        if(mCurrentView == null) {
            mCurrentView = playHolder.startG;
            mCurrentView.requestFocus();
        }
        uiControlHandler.removeMessages(0x7);
        uiControlHandler.sendEmptyMessageDelayed(0x7, 0x1388);
    }
    
    private void showPausing() {
        if((isFullScreenShow) && (!isMiniPlayBarShow)) {
            closeFullScreenBuffering();
            Message localMessage1 = new Message();
            localMessage1.what = 0x1;
            uiControlHandler.sendMessageDelayed(localMessage1, 0x3e8);
        }
    }
    
    private void hidePausing() {
        if((isFullScreenShow) && (!isMiniPlayBarShow)) {
            uiControlHandler.removeMessages(0x1);
            playHolder.mFullScreenDefaultFocusView.requestFocus();
        }
    }
    
    private void exitFullscreen() {
        if(!isFullScreenShow) {
            return;
        }
        if(!isMiniPlayBarShow) {
            showMiniPlayBarLayout();
        }
        isFullScreenShow = false;
        playHolder.mTowLyricLayout.setVisibility(0x8);
        playHolder.mTopMask.setVisibility(0x8);
        playHolder.mScrollLyric.setVisibility(0x0);
        playHolder.mFullScreenBtn.requestFocus();
        closeFullScreenBuffering();
        dismissToast();
        showSuperSoundOrGreenGuide();
        playHolder.mFullScreenBtn.setImageResource(0x7f020097);
        if(mPopupWindow != null) {
            mPopupWindow.dismiss();
        }
    }
    
    private void showSuperSoundOrGreenGuide() {
        uiControlHandler.removeMessages(0x6);
        uiControlHandler.sendEmptyMessageDelayed(0x6, 0x7d0);
    }
    
    private void showPopWindowTips() {
        // :( Parsing error. Please contact me.
    }
    
    private void closeSuperSoundNewGuide() {
        if(mSuperSoundNewGuide.getVisibility() == 0) {
            isInGuide = false;
            mSuperSoundNewGuide.setVisibility(0x8);
            playHolder.startG.requestFocus();
        }
    }
    
    private void refreshPlayQuality() {
        // :( Parsing error. Please contact me.
    }
    
    private void refreshLikeIcon() {
        // :( Parsing error. Please contact me.
    }
    
    private void refreshSeekBarAndTime() {
        try {
            if(d.a()) {
                mLyricView.refreshTime(mDuration);
                if(mDuration == 0x0) {
                    if((d.d()) || (d.e())) {
                        localStringBuilder1 = d.c().A() + "%";
                        if((!d.c().A() + "%".equals(mBufferingPercent)) && (!"100%".equals(d.c().A() + "%"))) {
                            mBufferingPercent = d.c().A() + "%";
                        }
                    }
                }
                playHolder.seekBarPlay = d.c().x();
                if(mDuration [cmp] d.c().B() != 0) {
                    mDuration = d.c().B();
                    if(mDuration < 0x0) {
                        mDuration = 0x0;
                    }
                }
                if((d.c() >= 0x0) && (mDuration > 0x0)) {
                    if(!mProgressTracking) {
                        if(d.c() > mDuration) {
                            d locald2 = mDuration;
                        }
                        mNowTimeText = getTime(d.c());
                        playHolder.mSeekNowTime.setText(mNowTimeText);
                    }
                    if(!mProgressTracking) {
                        setSeekBarProgress((int)((d.c() * 0x3e8) / mDuration));
                    }
                    return;
                }
                playHolder.seekBarPlay.setProgress(0x0);
                return;
            }
        } catch(Exception localString3) {
            b.b("PlayerActivity", "refreshSeekBarAndTime error:" + localString3.getMessage());
        }
    }
    
    private void setSeekBarProgress(int p1) {
        if((Build.VERSION.SDK_INT >= 0xb) && (p1 > 0x3) && (lastProgress != 0)) {
            playHolder.seekBarPlay = ObjectAnimator.ofInt(playHolder.seekBarPlay, "progress", new int[] {lastProgress, p1});
            playHolder.seekBarPlay.setDuration(0x44c);
            playHolder.seekBarPlay.setInterpolator(new DecelerateInterpolator());
            playHolder.seekBarPlay.start();
        } else {
            playHolder.seekBarPlay.setProgress(p1);
        }
        lastProgress = p1;
    }
    
    private void refreshPlayBtn() {
        if(d.e()) {
            playHolder.bufferingLayout.setVisibility(0x0);
            if((playHolder.startG.isFocused()) || (playHolder.mSuspend.isFocused())) {
                playHolder.mSuspend.requestFocus();
            }
            playHolder.startG.setVisibility(0x8);
            if(operatingAnim != null) {
                playHolder.buffering.startAnimation(operatingAnim);
            }
            if(isFullScreenShow) {
                openFullScreenBuffering();
            }
        } else {
            playHolder.startG.setVisibility(0x0);
            if((!playHolder.startG.isFocused()) && (playHolder.mSuspend.isFocused()) && (!isInGuide) && (!isPlayListShow)) {
                playHolder.startG.requestFocus();
            } else {
                playHolder.buffering.clearAnimation();
                playHolder.bufferingLayout.setVisibility(0x8);
                if(isFullScreenShow) {
                    closeFullScreenBuffering();
                } else if((!isInGuide) && (!isPlayListShow)) {
                    playHolder.startG.requestFocus();
                }
            }
        }
        setPlayOrPlayButton();
    }
    
    private void refreshFullScreenBtn() {
        b.b("PlayerActivity", "refreshFullScreenBtn:" + isNeedFullScreenBtn);
        b.b("PlayerActivity", "isPlayingForUI:" + d.b());
        if(d.b()) {
            uiControlHandler.sendEmptyMessage(0x7);
            return;
        }
        uiControlHandler.sendEmptyMessage(0x1);
    }
    
    private void refreshTotalTime() {
        try {
            playHolder.mTotalTime = d.c().B();
            if(d.c() == 0x0) {
                refreshTimePlayBgHandler.removeMessages(0x1);
                refreshTimePlayBgHandler.sendEmptyMessageDelayed(0x1, 0xc8);
                return;
            }
            mTotalTimeText = getTime(d.c());
            playHolder.mTotalTime.setText(mTotalTimeText);
            return;
        } catch(Exception localString1) {
            b.d("PlayerActivity", "refreshTotalTime error:" + localString1.getMessage());
        }
    }
    
    private void setPlayOrPlayButton() {
        try {
            setPlayOrPlayButton(d.c().g());
            return;
        } catch(Exception localException1) {
            b.a("PlayerActivity", " E : ", localException1);
        }
    }
    
    private void setPlayOrPlayButton(int p1) {
        try {
            if(mLyricView != null) {
                if(d.b(p1)) {
                    setPlayButton(Boolean.valueOf(true));
                    mLyricView.setNeedRefreshLyricByPlayerStatus(true);
                    return;
                }
                setPlayButton(Boolean.valueOf(false));
                mLyricView.setNeedRefreshLyricByPlayerStatus(false);
                return;
            }
        } catch(Exception localString1) {
            b.d("PlayerActivity", "setPlayOrPlayButton error:" + localString1.getMessage());
        }
    }
    
    private void addOrDelMyFav(SongInfo p1, boolean p2) {
        locale1 = e.e().a(p1.n());
        if(e.e() != null) {
            if(p2) {
                c.a(this, 0x0, 0x7f0b0559);
                return;
            }
            e.e().b(p1);
            return;
        }
        if(p2) {
            e.e().a(p1);
            return;
        }
        c.a(this, 0x0, 0x7f0b055e);
    }
    
    private void addMyFav(SongInfo p1) {
        locale1 = e.e().a(p1.n());
        if(e.e() == null) {
            e.e().a(p1);
            return;
        }
        c.a(this, 0x0, 0x7f0b0560);
    }
    
    public void onLoadFavSongSuc(ArrayList<SongInfo> p1, long p2) {
        runOnUiThread(new Runnable(this) {
            
            3(PlayerActivity p1) {
            }
            
            public void run() {
            }
        });
    }
    
    public void onDeleteFavSongSuc(SongInfo p1) {
        runOnUiThread(new Runnable(this) {
            
            4(PlayerActivity p1) {
            }
            
            public void run() {
                c.a(a, 0x0, 0x7f0b055a);
            }
        });
    }
    
    public void onAddFavSongSuc(SongInfo p1) {
        runOnUiThread(new Runnable(this) {
            
            5(PlayerActivity p1) {
            }
            
            public void run() {
                c.a(a, 0x0, 0x7f0b0558);
            }
        });
    }
    
    public void onFavSongOperationFail(int p1) {
        if(p1 == 0x2713) {
            runOnUiThread(new Runnable(this) {
                
                6(PlayerActivity p1) {
                }
                
                public void run() {
                    c.a(a, 0x1, 0x7f0b055f);
                }
            });
            return;
        }
        runOnUiThread(new Runnable(this) {
            
            7(PlayerActivity p1) {
            }
            
            public void run() {
                c.a(a, 0x1, 0x7f0b0561);
            }
        });
    }
    
    public void onBackPressed() {
        if((playHolder != null) && (playHolder.mDrawerLayout != null) && (playHolder.mDrawerLayout.j(playHolder.drawerRight))) {
            b.b("PlayerActivity", "onBackPressed ----->1");
            playHolder.mDrawerLayout.i(playHolder.drawerRight);
            if((isFullScreenShow) && (!isMiniPlayBarShow)) {
                playHolder.mFullScreenDefaultFocusView.requestFocus();
                return;
            }
            if(mCurrentView != null) {
                mCurrentView.requestFocus();
                return;
            }
            playHolder.listG.requestFocus();
            return;
        }
        if(!isFullScreenShow) {
            b.b("PlayerActivity", "onBackPressed ----->2");
            if(backFullScreenPressNum == 0) {
                backFullScreenPressNum = (backFullScreenPressNum + 0x1);
                c.a(this, 0x1, getString(0x7f0b090e));
                uiControlHandler.sendEmptyMessageDelayed(0xa, 0x1388);
                return;
            }
            backFullScreenPressNum = 0x0;
            showFullscreen();
            return;
        }
        b.b("PlayerActivity", "onBackPressed ----->3");
        if(isBackToBack) {
            isBackToBack = false;
            moveTaskToBack(true);
            return;
        }
        if(isFirstComing) {
            Intent localIntent1 = new Intent(this, MainActivity.class);
            startActivity(localIntent1);
            finish();
            return;
        }
        super.onBackPressed();
    }
    
    public boolean onKeyDown(int p1, KeyEvent p2) {
        b.b("PlayerActivity", "onKeyDown keyCode : " + p1 + " event : " + p2);
        if(!isInitUI) {
            return super.onKeyDown(p1, p2);
        }
        if(isFullScreenShow) {
            isFullScreenShow = p2.getRepeatCount();
            if(isFullScreenShow > 0) {
                isLongClick = true;
                if(handleLongClick(p1, p2)) {
                    return true;
                }
            }
            if((p1 == 0x7e) || (p1 == 0x55)) {
                isNeedFullScreenBtn = true;
                uiControlHandler.removeMessages(0xb);
                uiControlHandler.sendEmptyMessageDelayed(0xb, 0x5dc);
            }
            if((!isMiniPlayBarShow) && (p1 != 0x15) && (p1 != 0x16) && (p1 != 0x13) && (p1 != 0x14)) {
            }
        }
        if(getCurrentFocus() instanceof ImageView) {
            mCurrentView = getCurrentFocus();
        }
        if(p1 == 0x15) {
            if(playHolder.nextG.isFocused()) {
                if(playHolder.bufferingLayout.getVisibility() == 0) {
                    playHolder.mSuspend.requestFocus();
                    return true;
                }
                playHolder.startG.requestFocus();
                return true;
            }
            if(playHolder.startG.isFocused()) {
                playHolder.frontG.requestFocus();
                return true;
            }
            if((playHolder.bufferingLayout.isFocused()) || (playHolder.mSuspend.isFocused())) {
                playHolder.frontG.requestFocus();
                return true;
            }
        }
        if(p1 == 0x16) {
            if(playHolder.frontG.isFocused()) {
                if(playHolder.bufferingLayout.getVisibility() == 0) {
                    playHolder.mSuspend.requestFocus();
                    return true;
                }
                playHolder.startG.requestFocus();
                return true;
            }
            if(playHolder.startG.isFocused()) {
                playHolder.nextG.requestFocus();
                return true;
            }
            if((playHolder.bufferingLayout.isFocused()) || (playHolder.mSuspend.isFocused())) {
                playHolder.nextG.requestFocus();
                return true;
            }
        }
        return super.onKeyDown(p1, p2);
    }
    
    public boolean onKeyUp(int p1, KeyEvent p2) {
        b.b("PlayerActivity", "onKeyUp keyCode : " + p1 + " event : " + p2);
        if(!isInitUI) {
            return super.onKeyUp(p1, p2);
        }
        if(isFullScreenShow) {
            if(isLongClick) {
                isLongClick = false;
                if((p1 == 0x16) || (p1 == 0x15)) {
                    locallong1 = d.c().y();
                    if(mSeekPosition < 0x0) {
                        playHolder.mFullScreenCurrentTimeTv.setText(g.a(0x0));
                        playHolder.mFullScreenTotalTimeTv.setText(" / " + g.a("onKeyUp keyCode : " + p1 + " event : " + p2));
                        playHolder.mFullScreenSeekBar.setProgress(0x0);
                        c.a(this, 0x1, getString(0x7f0b0534));
                        mSeekPosition = 0x0;
                        try {
                        } else if(mSeekPosition > "onKeyUp keyCode : " + p1 + " event : " + p2) {
                            mSeekPosition = "onKeyUp keyCode : " + p1 + " event : " + p2;
                        }
                    }
                    d.c().a(mSeekPosition);
                    playHolder.mFullScreenSeekTimeLayout.setVisibility(0x8);
                    return true;
                } catch(Exception localException2) {
                    b.a("PlayerActivity", " E : ", localException2);
                    return true;
                }
            }
            if((p1 == 0x42) || (p1 == 0x60) || (p1 == 0x17)) {
                if((playHolder != null) && (playHolder.mDrawerLayout != null)) {
                    PlayerActivity.PlayerHolder playHolder = playHolder.drawerRight;
                    if((!playHolder.j(playHolder)) && ;
                }
                (!isMiniPlayBarShow)) {
                    isNeedFullScreenBtn = true;
                    uiControlHandler.removeMessages(0xb);
                    uiControlHandler.sendEmptyMessageDelayed(0xb, 0x5dc);
                    if(!d.b()) {
                        setPlay(Boolean.valueOf(true));
                        return true;
                    }
                    setPlay(Boolean.valueOf(false));
                    return true;
                }
            }
            if((p1 == 0x52) || (p1 == 0x63) || (p1 == 0xa5)) {
                if((playHolder != null) && (playHolder.mDrawerLayout != null)) {
                    PlayerActivity.PlayerHolder playHolder = playHolder.drawerRight;
                    if(playHolder.j(playHolder)) {
                        playHolder.mDrawerLayout.i(playHolder.drawerRight);
                        playHolder.mFullScreenDefaultFocusView.requestFocus();
                        return true;
                    }
                }
                if(isShouldShowPlayList) {
                    if(playHolder != null) {
                        playHolder.mDrawerLayout.h(playHolder.drawerRight);
                        initPlayListFocus();
                    }
                    if(isFullScreenShow) {
                        hideMiniPlayBarLayout();
                    }
                    return true;
                }
            }
            if(p1 == 0x15) {
                if((playHolder != null) && (playHolder.mDrawerLayout != null)) {
                    LinearLayout playHolder.drawerRight = playHolder.drawerRight;
                    if((!playHolder.j(playHolder)) && (!playHolder.mDrawerLayout.k(playHolder.drawerRight))
                }
                 || !isMiniPlayBarShow) {
                    prevPlay();
                    mCountDownTimer.cancel();
                    showMiniPlayBarLayout();
                    return true;
                }
            }
            if(p1 == 0x16) {
                if((playHolder != null) && (playHolder.mDrawerLayout != null)) {
                    LinearLayout playHolder.drawerRight = playHolder.drawerRight;
                    if((!playHolder.j(playHolder)) && (!playHolder.mDrawerLayout.k(playHolder.drawerRight))
                }
                 || !isMiniPlayBarShow) {
                    backPlay();
                    mCountDownTimer.cancel();
                    showMiniPlayBarLayout();
                    return true;
                }
            }
            if((p1 == 0x18) || (p1 == 0x13)) {
                if(p1 == 0x13) {
                    showOrHideMiniPlayBarLayout();
                    return true;
                }
            }
            if((p1 == 0x19) || (p1 == 0x14)) {
                if(p1 == 0x14) {
                    showOrHideMiniPlayBarLayout();
                    return true;
                }
            }
            if((p1 != 0x4) && (p1 != 0xa4)) {
                if((playHolder != null) && (playHolder.mDrawerLayout != null)) {
                    PlayerActivity.PlayerHolder playHolder = playHolder.drawerRight;
                    if((!playHolder.j(playHolder)) && ;
                }
                (!isFullScreenShow)) {
                    showFullscreen();
                    return true;
                }
            }
            if((p1 == 0x7e) || (p1 == 0x55)) {
                isNeedFullScreenBtn = true;
                uiControlHandler.sendEmptyMessageDelayed(0xb, 0x5dc);
            }
        }
        if((p1 == 0x52) || (p1 == 0x63) || (p1 == 0xa5)) {
            if((playHolder != null) && (playHolder.mDrawerLayout != null)) {
                PlayerActivity.PlayerHolder playHolder = playHolder.drawerRight;
                if(playHolder.j(playHolder)) {
                    playHolder.mDrawerLayout.i(playHolder.drawerRight);
                    if(mCurrentView != null) {
                        mCurrentView.requestFocus();
                        return true;
                    }
                    playHolder.listG.requestFocus();
                    return true;
                }
            }
            if(isShouldShowPlayList) {
                playHolder.mDrawerLayout.h(playHolder.drawerRight);
                initPlayListFocus();
                return true;
            }
        }
        return super.onKeyUp(p1, p2);
    }
    
    private void showOrHideMiniPlayBarLayout() {
        if(isMiniPlayBarShow) {
            hideMiniPlayBarLayout();
            return;
        }
        showMiniPlayBarLayout();
    }
    
    private boolean handleLongClick(int p1, KeyEvent p2) {
        // :( Parsing error. Please contact me.
    }
    
    public SongInfo getSongInfo() {
        return mSongInfo;
    }
    
    public void onLyricPanelVisibleChangeListener(boolean p1) {
    }
    
    private String getTime(long p1) {
        (p1 / 0xea60) = (int)(p1 / 0xea60);
        int localStringBuilder1 = (int)((p1 % 0xea60) / 0x3e8);
        localString2 = String.valueOf(localString3);
        localString3 = String.valueOf(localStringBuilder1);
        if(localStringBuilder1 < 0xa) {
            localString3 = "0" + String.valueOf(localStringBuilder1);
        }
        return ((p1 % 0xea60) / 0x3e8) + ":" + localString3;
    }
    
    private void displayBriefMemory() {
        // :( Parsing error. Please contact me.
    }
    
    class b extends Handler {
        private final WeakReference<PlayerActivity> a;
        
        private b(PlayerActivity p1) {
            a = new WeakReference(p1);
        }
        
        public void handleMessage(Message p1) {
            a = (PlayerActivity)a.get();
            if(a != null) {
                if(g.a(a)) {
                    return;
                }
            }
        }
    }
    
    private void handleUIControl(int p1) {
        // :( Parsing error. Please contact me.
    }
    
    private void hidePlayOrPausingMask() {
    }
    
    class a extends Handler {
        private final WeakReference<PlayerActivity> a;
        
        private a(PlayerActivity p1) {
            a = new WeakReference(p1);
        }
        
        public void handleMessage(Message p1) {
            a = (PlayerActivity)a.get();
            if(a != null) {
                if(g.a(a)) {
                    return;
                }
            }
        }
    }
    
    private void handleRefreshTimePlayBg(int p1) {
        switch(p1) {
            case 0:
            {
                refreshSeekBarAndTime();
                return;
            }
            case 1:
            {
                refreshTotalTime();
                return;
            }
            case 2:
            {
                synchronized(mPlayBgUriLock) {
                    initPlayBg();
                }
                break;
                break;
            }
        }
    }
    
    private void showSetSongQualityDialog() {
        if((d.b()) && (a.a().t()) && (!isSongQualityDialogShowing)) {
            localboolean1 = (UserManager)UserManager.Companion.getInstance(MusicApplication.getContext()).getUser();
            if(((UserManager)UserManager.Companion.getInstance(MusicApplication.getContext()) != null) && ((UserManager)UserManager.Companion.getInstance(MusicApplication.getContext()).isGreen()) && (!a.a().u())) {
                localconst2 = getResources().getString(0x7f0b09aa);
                localconst3 = getResources().getString(0x7f0b09a9);
                b localboolean1 = new b(this, 0x7f0b09aa, 0x7f0b09a9, getResources().getString(0x7f0b09a8), 0x0);
                localboolean1.a(new b.a(this, localboolean1) {
                    
                    18(PlayerActivity p1, b p2) {
                    }
                    
                    public void a() {
                        Intent locala1 = new Intent();
                        locala1.setClass(b, SettingActivity.class);
                        b.startActivity(locala1);
                        a.dismiss();
                        isSongQualityDialogShowing = false;
                        a.a().i(false);
                    }
                    
                    public void b() {
                        a.dismiss();
                        isSongQualityDialogShowing = false;
                        a.a().i(false);
                    }
                    
                    public void c() {
                        a.dismiss();
                        isSongQualityDialogShowing = false;
                        a.a().i(false);
                    }
                });
                localboolean1.show();
                isSongQualityDialogShowing = true;
            }
        }
    }
    
    protected void onNewIntent(Intent p1) {
        super.onNewIntent(p1);
        isFirstComing = p1.getBooleanExtra("is_first_comming", false);
        isBackToBack = p1.getBooleanExtra("mb", false);
        handleIntent(p1);
        b.b("PlayerActivity", "onNewIntent finish isBackToBack : " + isBackToBack);
    }
    
    private void handleIntent(Intent p1) {
        // :( Parsing error. Please contact me.
    }
    
    public void onActivityResult(int p1, int p2, Intent p3) {
        super.onActivityResult(p1, p2, p3);
        b.b("PlayerActivity", "onActivityResult resultCode : " + p2 + " requestCode : " + p1);
        if(p3 == null) {
            return;
        }
        if(p2 == -0x1) {
            if(p1 == 0x3) {
                0x3 = 0x0;
                try {
                    localString1 = d.c().j();
                } catch(Exception localException2) {
                    b.a("PlayerActivity", " E : ", localException2);
                }
                ArrayList localException2 = new ArrayList();
                localException2.add(0x3);
                a.a().a(localException2, new a.a(this) {
                    
                    19(PlayerActivity p1) {
                    }
                    
                    public void a(ArrayList<SongInfo> p1, ArrayList p2) {
                        if(p2 == null) {
                            return;
                        }
                        a = (SongInfo)p2.get(0x0);
                        if(0x0.aH()) {
                            if((UserManager)UserManager.Companion.getInstance(MusicApplication.getContext()).getUser() != null) {
                            }
                        } else {
                        }
                    }
                });
            }
        }
    }
    
    private void clearBGMemoryCache() {
        if((mPlayBgUriList != null) && (mPlayBgUriList.size() > 0)) {
            for(; mPlayBgUriList.iterator().hasNext(); localUri1) {
                ImagePipelineFactory.getInstance().getImagePipeline().evictFromMemoryCache(Uri.parse(mPlayBgUriList.iterator().hasNext()));
            }
        }
        Runtime.getRuntime().gc();
        System.runFinalization();
        Runtime.getRuntime().gc();
    }
    
    public void receiveBroadcast(int p1) {
        b.b("PlayerActivity", "receiveBroadcast " + p1 + " !isStop : " + (!isStop));
        if(p1 == 0xca) {
            try {
                mSongInfo = d.c().j();
            } catch(Exception localException1) {
                b.a("PlayerActivity", " E : ", localException1);
            }
        }
        if(!isStop) {
            if((p1 == 0xc8) || (p1 == 0xca)) {
                refreshPlayBtn();
                if(p1 == 0xca) {
                    refreshUI();
                }
                if(!isInGuide) {
                    uiControlHandler.removeMessages(0x6);
                    uiControlHandler.sendEmptyMessageDelayed(0x6, 0x7d0);
                }
                refreshFullScreenBtn();
                return;
            }
            if(p1 == 0xcb) {
                setMode();
                return;
            }
            if(p1 == 0xc9) {
                try {
                    playList = d.c().k().f();
                    playListAdapter.a(playList);
                    playListAdapter.notifyDataSetChanged();
                    return;
                } catch(Exception localException2) {
                    b.a("PlayerActivity", " E : ", localException2);
                    return;
                }
            }
            if(p1 == 0xcd) {
                refreshTimePlayBgHandler.sendEmptyMessage(0x0);
            }
        }
    }
    
    private void handleVolumeKey(boolean p1) {
        p.a(getApplicationContext()).a(p1);
    }
    
    private void openFullScreenBuffering() {
        playHolder.mFullScreenBuffering.setVisibility(0x0);
        playHolder.mFullScreenBufferingProgress.setVisibility(0x0);
        mCountDownTimer.cancel();
        mBufferingProgress = (int)(Math.random() * 10.0);
        mCountDownTimer.start();
        if(mFullBufferingAnim != null) {
            playHolder.mFullScreenBuffering.startAnimation(mFullBufferingAnim);
        }
    }
    
    private void closeFullScreenBuffering() {
        playHolder.mFullScreenBufferingProgress.setVisibility(0x4);
        playHolder.mFullScreenBuffering.clearAnimation();
        playHolder.mFullScreenBuffering.setVisibility(0x4);
        mCountDownTimer.cancel();
        mBufferingProgress = (int)(Math.random() * 10.0);
    }
    
    public void onTrimMemory(int p1) {
        super.onTrimMemory(p1);
        Fresco.getImagePipeline().clearCaches();
    }
    
    private void showMiniPlayBarLayout() {
        if((isMiniPlayBarShow) || (!isFullScreenShow) || (isPlayListShow) || (playHolder == null)) {
            return;
        }
        playHolder.mSeekLayout = playHolder.mSeekLayout.getHeight();
        playHolder.mMiniPlayBar = playHolder.mMiniPlayBar.getHeight();
        playHolder.mMiniPlayBar = ObjectAnimator.ofFloat(playHolder.mMiniPlayBar, "translationY", new float[] {(float)(playHolder.mMiniPlayBar + playHolder.mSeekLayout), 0x0});
        playHolder.mSeekLayout = ObjectAnimator.ofFloat(playHolder.mSeekLayout, "translationY", new float[] {(float)(playHolder.mMiniPlayBar + playHolder.mSeekLayout), 0x0});
        playHolder.startG = ObjectAnimator.ofFloat(playHolder.mTowLyricLayout, "translationY", new float[] {(float)(playHolder.mSeekLayout + playHolder.mMiniPlayBar), 0x0});
        AnimatorSet localString1 = new AnimatorSet();
        localString1.play(playHolder.mMiniPlayBar).with(playHolder.mSeekLayout).with((float)(playHolder.mSeekLayout + playHolder.mMiniPlayBar));
        localString1.setInterpolator(new c());
        localString1.setDuration(0x320);
        localString1.start();
        isMiniPlayBarShow = true;
        uiControlHandler.removeMessages(0x7);
        b.b("PlayerActivity", "mCurrentView : " + mCurrentView);
        if(mCurrentView != null) {
            mCurrentView.requestFocus();
            return;
        }
        if(d.e()) {
            playHolder.mSuspend.requestFocus();
            return;
        }
        playHolder.startG.requestFocus();
    }
    
    private void hideMiniPlayBarLayout() {
        if((!isMiniPlayBarShow) || (!isFullScreenShow) || (playHolder == null)) {
            return;
        }
        playHolder.mSeekLayout = playHolder.mSeekLayout.getHeight();
        if(playHolder.mSeekLayout != null) {
            playHolder.mMiniPlayBar = playHolder.mMiniPlayBar.getHeight();
            playHolder.mMiniPlayBar = ObjectAnimator.ofFloat(playHolder.mMiniPlayBar, "translationY", new float[] {0x0, (float)(playHolder.mMiniPlayBar + playHolder.mSeekLayout)});
            playHolder.mSeekLayout = ObjectAnimator.ofFloat(playHolder.mSeekLayout, "translationY", new float[] {0x0, (float)(playHolder.mMiniPlayBar + playHolder.mSeekLayout)});
            mPopupWindow = ObjectAnimator.ofFloat(playHolder.mTowLyricLayout, "translationY", new float[] {0x0, (float)(playHolder.mSeekLayout + playHolder.mMiniPlayBar)});
            AnimatorSet localAnimatorSet1 = new AnimatorSet();
            localAnimatorSet1.play(playHolder.mMiniPlayBar).with(playHolder.mSeekLayout).with((float)(playHolder.mSeekLayout + playHolder.mMiniPlayBar));
            localAnimatorSet1.setInterpolator(new c());
            localAnimatorSet1.setDuration(0x320);
            localAnimatorSet1.start();
            isMiniPlayBarShow = false;
            playHolder.mFullScreenDefaultFocusView.requestFocus();
            if(mPopupWindow != null) {
                mPopupWindow.dismiss();
            }
        }
    }
    
    protected void onStop() {
        b.b("PlayerActivity", "onStop");
        if(isInitUI) {
            try {
                d.c().b(changeInterface);
            } catch(Exception localException1) {
                b.a("PlayerActivity", localException1);
            }
            isStop = true;
        }
        super.onStop();
    }
    
    protected void onDestroy() {
        b.b("PlayerActivity", "onDestroy");
        super.onDestroy();
        if(isInitUI) {
            playHolder.mTvImageViewCarousel.destroyView();
            playHolder.playBg.setControllerListener(0x0);
            ImagePipelineFactory.getInstance().getImagePipeline().clearMemoryCaches();
            clearBGMemoryCache();
            a.a().b(mLyricLoadInterface);
            if(mLyricView != null) {
                mLyricView.stopTimer();
                mLyricView.setLyricChangeListener(0x0);
                mLyricView.destroyLyricView();
                mLyricView = 0x0;
            }
            if(playHolder.mScrollLyricLine1 != null) {
                playHolder.mScrollLyricLine1.g();
                playHolder.mScrollLyricLine1 = 0x0;
            }
            if(playHolder.mScrollLyricLine2 != null) {
                playHolder.mScrollLyricLine2.g();
                playHolder.mScrollLyricLine2 = 0x0;
            }
            e.e().b(this);
            refreshTimePlayBgHandler.removeCallbacksAndMessages(0x0);
            uiControlHandler.removeCallbacksAndMessages(0x0);
            try {
                d.c().b(this);
            } catch(Exception localException1) {
                b.a("PlayerActivity", localException1);
            }
            mCountDownTimer.cancel();
            playHolder.mDrawerLayout.b(mDrawerListener);
        }
        getWindow().clearFlags(0x80);
        if(mContext != null) {
            mContext.clear();
            mContext = 0x0;
        }
        b.a().b();
    }
    
    public static void quitActivity() {
        if((mContext != null) && (mContext.get() != null)) {
            (Activity)mContext.get().finish();
        }
    }
    
    private void showSonyAgreement(Bundle p1) {
        if(g.f()) {
            b.b("PlayerActivity", "TvPreferences.getInstance().getUserAgreement() : " + a.a().O());
            if(a.a().O()) {
                isFromChannel = true;
                localString1 = (ViewStub)findViewById(0x7f120272);
                if(!0x7f120272) {
                    return;
                }
                0x7f120272.setLayoutResource(0x7f04001f);
                0x7f120272.inflate();
                localString2 = (ImageView)findViewById(0x7f120119);
                locallong3 = (TextView)findViewById(0x7f12011c);
                localconst4 = (TextView)findViewById(0x7f12011d);
                locallong5 = (TextView)findViewById(0x7f12011e);
                localResources6 = (TextView)findViewById(0x7f12011f);
                localconst7 = (TextView)findViewById(0x7f12011a);
                localconst8 = (TextView)findViewById(0x7f12011b);
                localconst9 = (ScrollView)findViewById(0x7f12008e);
                0x7f12011b.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(this, 0x7f12011b, 0x7f12008e, 0x7f12011a) {
                    
                    21(PlayerActivity p1, TextView p2, ScrollView p3, TextView p4) {
                    }
                    
                    public boolean onPreDraw() {
                        try {
                            a.getViewTreeObserver().removeOnPreDrawListener(this);
                        } catch(Exception localString1) {
                            b.b("PlayerActivity", "removeOnPreDrawListener Exception:" + localString1.getMessage());
                        }
                        if(b.getHeight() != 0) {
                            mTotalNum = ((a.getHeight() / (b.getHeight() - 0x1e)) + 0x1);
                        } else {
                            mTotalNum = 0xf;
                        }
                        c.setText(mCurrentNum + "/" + mTotalNum);
                        return true;
                    }
                });
                0x7f12011c.setOnClickListener(new View.OnClickListener(this, 0x7f120272, p1) {
                    
                    22(PlayerActivity p1, ViewStub p2, Bundle p3) {
                    }
                    
                    public void onClick(View p1) {
                        a.setVisibility(0x4);
                        a.a().m(false);
                    }
                });
                0x7f12011e.setOnClickListener(new View.OnClickListener(this, 0x7f12011b, 0x7f12008e, 0x7f12011a) {
                    
                    24(PlayerActivity p1, TextView p2, ScrollView p3, TextView p4) {
                    }
                    
                    public void onClick(View p1) {
                        if(a.getMeasuredHeight() > b.getScrollY()) {
                            if(mCurrentNum < mTotalNum) {
                                c.setText(access$3004(d) + "/" + mTotalNum);
                            }
                            b.smoothScrollTo(0x0, ((b.getScrollY() + b.getHeight()) - 0x1e));
                        }
                    }
                });
                0x7f12011f.setOnClickListener(new View.OnClickListener(this, 0x7f12008e, 0x7f12011a) {
                    
                    25(PlayerActivity p1, ScrollView p2, TextView p3) {
                    }
                    
                    public void onClick(View p1) {
                        if(a.getScrollY() > 0) {
                            if(mCurrentNum > 0x1) {
                                b.setText(access$3006(c) + "/" + mTotalNum);
                            }
                            a.smoothScrollTo(0x0, ((a.getScrollY() - a.getHeight()) + 0x1e));
                        }
                    }
                });
                0x7f12011d.setOnClickListener(new View.OnClickListener(this) {
                    
                    26(PlayerActivity p1) {
                    }
                    
                    public void onClick(View p1) {
                        a.finish();
                    }
                });
                0x7f12011c.requestFocus();
                locallong3 = System.currentTimeMillis();
                BitmapFactory.Options localString1 = new BitmapFactory.Options();
                localString1.inMutable = true;
                0x7f120119.setImageBitmap(c.a().a(BitmapFactory.decodeResource(getResources(), 0x7f02012b, localString1), 0xa, 0x14));
                b.b("PlayerActivity", "blur time:" + (System.currentTimeMillis() - 0x7f12011c));
                return;
            }
            startPlayForSony(p1);
            return;
        }
        startPlayForSony(p1);
    }
    
    private void startPlayForSony(Bundle p1) {
        if(p1 != null) {
            try {
                mChannelId = p1.getLong("extra.CHANNEL_ID", 0xffffffff);
                mStartingPosition = p1.getLong("extra.POSITION", 0xfffffffe);
                locallong1 = p1.getParcelableArrayList("extra.song");
                b.b("PlayerActivity", "mChannelId : " + mChannelId + " mStartingPosition : " + mStartingPosition + " BOOLEAN : " + ((p1.getLong("extra.POSITION", 0xfffffffe) != 0) && (p1.getLong("extra.POSITION", 0xfffffffe).size() > 0)));
                if((mChannelId [cmp] -0x1 != 0) && (p1.getLong("extra.POSITION", 0xfffffffe) != 0) && (p1.getLong("extra.POSITION", 0xfffffffe).size() > 0)) {
                    p1.getLong("extra.POSITION", 0xfffffffe).size() = 0x0;
                    for(; p1.getLong("extra.POSITION", 0xfffffffe).size() < "PlayerActivity".length; p1.getLong("extra.POSITION", 0xfffffffe).size() = (p1.getLong("extra.POSITION", 0xfffffffe).size() + 0x1)) {
                        "PlayerActivity"[p1.getLong("extra.POSITION", 0xfffffffe).size()] = (SongOperateItem)p1.getLong("extra.POSITION", 0xfffffffe).get(p1.getLong("extra.POSITION", 0xfffffffe).size()).getMusicid();
                    }
                    a locala2 = new a();
                    locala2.a("PlayerActivity", new a.a(this) {
                        
                        27(PlayerActivity p1) {
                        }
                        
                        public void a(ArrayList<SongInfo> p1) {
                            if((p1 == null) || (p1.size() == 0)) {
                                b.b("PlayerActivity", "handleIntent return");
                                return;
                            }
                            MusicPlayList localMusicPlayList1 = new MusicPlayList(0x8, 0x0);
                            localMusicPlayList1.a(p1);
                            0x8 = 0x0;
                            for(; 0x8 < p1.size(); 0x8 = (0x8 + 0x1)) {
                                b.b("PlayerActivity", "" + (SongInfo)p1.get(0x8).w());
                            }
                            try {
                                b.b("PlayerActivity", "handleIntent----1 mStartingPosition : " + mStartingPosition);
                                d.c().a(a, localMusicPlayList2, (int)mStartingPosition, 0x0, 0x0, false);
                                return;
                            } catch(Exception localException3) {
                                b.a("PlayerActivity", " E : ", localException3);
                            }
                        }
                    });
                    return;
                }
            } catch(Exception localException3) {
                b.a("PlayerActivity", localException3);
            }
            
        }
    }
}
