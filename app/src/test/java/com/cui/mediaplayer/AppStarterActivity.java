/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.cui.mediaplayer;

import android.os.Handler;
import java.lang.ref.WeakReference;
import android.os.Message;
import android.app.Activity;
import android.support.v4.app.a;
import com.tencent.qqmusic.login.business.UserManagerListener;
import android.widget.ImageView;
import com.tencent.qqmusictv.business.j.a;
import com.tencent.qqmusic.login.business.LoginCallback;
import java.util.ArrayList;
import com.tencent.qqmusictv.network.response.model.node.ItemSongNode;
import com.tencent.qqmusicplayerprocess.songinfo.SongInfo;
import com.tencent.qqmusic.login.user.LocalUser;
import com.tencent.qqmusic.innovation.network.b.c;
import android.support.v4.content.a;
import com.tencent.qqmusic.login.manager.UserManager;
import com.tencent.qqmusictv.MusicApplication;
import android.content.Context;
import com.tencent.qqmusictv.tinker.TinkerApplicationLike;
import com.tencent.qqmusic.innovation.common.util.b.d;
import android.content.Intent;
import com.tencent.qqmusiccommon.appconfig.g;
import com.tencent.qqmusic.innovation.common.a.b;
import com.tencent.qqmusiccommon.appconfig.i;
import android.os.Process;
import android.view.View;
import com.tencent.qqmusictv.common.d.a;
import com.tencent.qqmusictv.network.request.RequestFactory;
import com.tencent.qqmusictv.network.request.SearchRequestNew;
import com.tencent.qqmusic.innovation.network.Network;
import com.tencent.qqmusic.innovation.network.request.CommonRequest;
import com.tencent.qqmusiccommon.util.b.b;
import android.content.res.Resources;
import com.tencent.qqmusictv.d.g;
import android.view.ViewStub;
import android.widget.TextView;
import android.widget.ScrollView;
import android.view.ViewTreeObserver;
import android.graphics.BitmapFactory;
import com.tencent.qqmusictv.business.d.c;
import android.graphics.Bitmap;
import android.os.Bundle;
import com.tencent.qqmusictv.d.d;
import android.graphics.drawable.Drawable;

public class AppStarterActivity extends Activity implements a.a, UserManagerListener {
    private static final int CURRENT_USER_NO_FIT = 0x0;
    public static final String FIRST_COMMING = "is_first_comming";
    public static final String IS_FIRST_STARTED = "is_first_started";
    private static final int MY_PERMISSIONS_REQUEST_READ_PHONE_STATE = 0x3e8;
    private static final int MY_PERMISSIONS_REQUEST_STORAGE = 0x7d0;
    private static final int SONY_PROTOCOL_OFFSET = 0x1e;
    private static final int STEP_A = 0x0;
    private static final int STEP_A_TIME = 0xc8;
    private static final int STEP_B = 0x1;
    private static final int STEP_B_DOUBLE = 0x3;
    private static final int STEP_B_DOUBLE_TIME = 0x64;
    private static final int STEP_B_TIME = 0x258;
    private static final int STEP_C = 0x2;
    private static final int STEP_C_TIME = 0x64;
    public static final String TAG = "AppStarterActivity";
    private boolean isLoginSuccess;
    private final Object lock;
    private ImageView mBgImageView;
    private a mBindComplete;
    private int mCurrentNum;
    private a mHandler;
    private final Object mLock;
    private LoginCallback mLoginCallback;
    private ArrayList<ItemSongNode> mSearchItemSongNode;
    private ArrayList<SongInfo> mSearchSongInfo;
    private int mTotalNum;
    private LocalUser mUser;
    private UserManagerListener mUserManagerListener;
    public static long sAppStarterCreateEndTime;
    public static long sAppStarterCreateStartTime;
    public static long sAppStarterEndTime;
    public static long sAppStarterStartTime;
    public static long sPermissionEndTime;
    public static long sPermissionStartTime;
    public static long sStepAEndTime;
    public static long sStepAStartTime;
    public static long sStepBBdoubleEndTime;
    public static long sStepBBoubleStartTime;
    public static long sStepBEndTime;
    public static long sStepBStartTime;
    public static long sStepCEndTime;
    public static long sStepCStartTime;
    private c.a searchListener;
    
    public AppStarterActivity() {
        lock = new Object();
        mSearchItemSongNode = new ArrayList();
        mSearchSongInfo = new ArrayList();
        mCurrentNum = 0x1;
        mLock = new Object();
        isLoginSuccess = false;
        mHandler = new a(this, 0x0);
        searchListener = new c.a(this) {
            
            3(AppStarterActivity p1) {
            }
            
            public void onSuccess(CommonResponse p1) {
                // :( Parsing error. Please contact me.
            }
            
            public void onError(int p1, String p2) {
                b.b("AppStarterActivity", "onError errorCode : " + p1 + " errorMessage : " + p2);
                Intent a = new Intent(a, MainActivity.class);
                a.startActivity(a);
                a.finish();
            }
        };
    }
    public static final String[] QQMUSIC_PERMISSIONS = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"}
    
    protected void onCreate(Bundle p1) {
        d.a.a("appStarterActivity_onCreate_begin");
        super.onCreate(p1);
        sAppStarterCreateStartTime = System.currentTimeMillis();
        setContentView(0x7f040020);
        initUI();
        if(i.a()) {
            mLoginCallback = new LoginCallback(this) {
                
                1(AppStarterActivity p1) {
                }
                
                public void loginSuccess(String p1) {
                    isLoginSuccess = true;
                    mUser = (UserManager)UserManager.Companion.getInstance(a.getApplicationContext()).getUser();
                    if(a) {
                        return;
                    }
                    b.b("AppStarterActivity", "------>1");
                }
                
                public void loginFailed(int p1, String p2, String p3) {
                    isLoginSuccess = false;
                    b.b("AppStarterActivity", "loginFailed ");
                    if(p1 == 0x4b6) {
                        b.b("AppStarterActivity", "ERROR_CODE_GRAY ");
                        b.b("AppStarterActivity", "------>2");
                        return;
                    }
                    String localString1 = a;
                    b localb2 = new b("loginFailed ", a.getResources(), 0x7f0b0974.getResources().getString(0x7f0b0943), "", 0x1);
                    localb2.a(new b.a(this) {
                        
                        1(AppStarterActivity.1 p1) {
                        }
                        
                        public void a() {
                        }
                        
                        public void b() {
                        }
                        
                        public void c() {
                            exitApp();
                        }
                    });
                    localb2.show();
                }
            };
            (UserManager)UserManager.Companion.getInstance(getApplicationContext()).addLoginCallback(mLoginCallback);
            mUserManagerListener = new UserManagerListener(this) {
                
                10(AppStarterActivity p1) {
                }
                
                public void onloginOK(Boolean p1, String p2) {
                }
                
                public void onloginFail(int p1, String p2, String p3) {
                    b.b("AppStarterActivity", "ret : " + p1 + " msg : " + p2);
                }
                
                public void onUpdate(int p1, int p2) {
                }
                
                public void onRefreshUserinfo(int p1, String p2) {
                }
                
                public void onLogout() {
                }
                
                public void onLoginCancel() {
                }
            };
            (UserManager)UserManager.Companion.getInstance(getApplicationContext()).addListener(mUserManagerListener);
        }
        sAppStarterCreateEndTime = System.currentTimeMillis();
        b.b("AppStarterActivity", "onCreate");
        d.a.a("appStarterActivity_onCreate_end");
    }
    
    private void initUI() {
        mBgImageView = (ImageView)findViewById(0x7f120121);
    }
    
    protected void onStart() {
        super.onStart();
        sAppStarterStartTime = System.currentTimeMillis();
        showSonyAgreement();
        sAppStarterEndTime = System.currentTimeMillis();
        b.b("AppStarterActivity", "onStart");
    }
    
    protected void onResume() {
        d.a.a("appStarterActivity_onResume_begin");
        super.onResume();
        b.b("AppStarterActivity", "onResume");
        d.a.a("appStarterActivity_onResume_end");
    }
    
    public void onWindowFocusChanged(boolean p1) {
        super.onWindowFocusChanged(p1);
        if(!p1) {
            d.a.a("appStarterActivity_onWindowFocusChanged_false");
        }
    }
    
    protected void onStop() {
        super.onStop();
        b.b("AppStarterActivity", "onStop");
    }
    
    protected void onDestroy() {
        super.onDestroy();
        mBgImageView.setImageDrawable(0x0);
        mHandler.removeCallbacksAndMessages(0x0);
        if(i.a()) {
            (UserManager)UserManager.Companion.getInstance(getApplicationContext()).removeLoginCallback(mLoginCallback);
            mLoginCallback = 0x0;
        }
        if(i.a()) {
            (UserManager)UserManager.Companion.getInstance(getApplicationContext()).delListener(mUserManagerListener);
        }
        b.b("AppStarterActivity", "onDestroy");
    }
    
    protected void startApp() {
        b.b("AppStarterActivity", "startApp");
        try {
            mHandler.sendEmptyMessage(0x0);
            return;
        } catch(Exception localException1) {
            b.a("AppStarterActivity", localException1);
        }
    }
    
    public void onRefreshUserinfo(int p1, String p2) {
    }
    
    public void onLogout() {
    }
    
    public void onLoginCancel() {
    }
    
    public void onloginOK(Boolean p1, String p2) {
    }
    
    public void onloginFail(int p1, String p2, String p3) {
        b.b("AppStarterActivity", "ret : " + p1 + " msg : " + p2);
        startLoginActivity();
    }
    
    public void onUpdate(int p1, int p2) {
    }
    
    class a extends Handler {
        private final WeakReference<AppStarterActivity> a;
        
        private a(AppStarterActivity p1) {
            a = new WeakReference(p1);
        }
        
        public void handleMessage(Message p1) {
            a = (AppStarterActivity)a.get();
            if(a != null) {
            }
        }
    }
    
    private void handleMessage(Message p1) {
        synchronized(lock) {
            if(g.d) {
                return;
            } finally {
            }
            try {
                switch(p1.what) {
                    case 0:
                    {
                        sStepAStartTime = System.currentTimeMillis();
                        TinkerApplicationLike.programStart1();
                        sStepAEndTime = System.currentTimeMillis();
                        b.b("zhangsg", "step 2 = " + (System.currentTimeMillis() - TinkerApplicationLike.sApplicationCreateStartTime));
                        mHandler.sendEmptyMessageDelayed(0x1, 0x0);
                        mHandler.sendEmptyMessageDelayed(0x3, 0x64);
                    }
                    case 1:
                    {
                        if(g.j) {
                            mHandler.sendEmptyMessageDelayed(0x1, 0x32);
                        } else {
                            sStepBStartTime = System.currentTimeMillis();
                            TinkerApplicationLike.programStart2();
                            sStepBEndTime = System.currentTimeMillis();
                            mHandler.sendEmptyMessage(0x2);
                        }
                        b.b("zhangsg", "step 3 = " + (System.currentTimeMillis() - TinkerApplicationLike.sApplicationCreateStartTime));
                    }
                    case 3:
                    {
                        if(g.j) {
                            mHandler.sendEmptyMessageDelayed(0x3, 0x32);
                        } else {
                            sStepBBoubleStartTime = System.currentTimeMillis();
                            TinkerApplicationLike.programStart2double();
                            sStepBBdoubleEndTime = System.currentTimeMillis();
                        }
                        b.b("zhangsg", "step 4 = " + (System.currentTimeMillis() - TinkerApplicationLike.sApplicationCreateStartTime));
                    }
                    case 2:
                    {
                        g.c = 0x1;
                        b.b("AppStarterActivity", "ProgramState.mIsStarted:" + g.c + "  Process.myPid:" + Process.myPid());
                        if(checkBothPermissions()) {
                            if(!isHandleGrayStrategy()) {
                                gotoNextActivity();
                            }
                        } catch(Exception localException1) {
                            b.a("appStart mStartHandler", localException1);
                            break;
                        }
                    }
                }
                
            }
        }
        // Parsing error may occure here :(
    }
    
    private boolean checkBothPermissions() {
        // :( Parsing error. Please contact me.
    }
    
    private void showDialog(Activity p1, boolean p2) {
        localconst1 = p1.getResources().getString(0x7f0b04db);
        b localb2 = new b(p1, 0x7f0b04db, p1, "", 0x1);
        localb2.a(new b.a(this, localb2, p2) {
            
            12(AppStarterActivity p1, b p2, boolean p3) {
            }
            
            public void a() {
                a.dismiss();
                if(b) {
                    if(localboolean1) {
                        if(!localboolean1) {
                        }
                    }
                    return;
                }
                if(!localboolean1) {
                }
            }
            
            public void b() {
                a.dismiss();
            }
            
            public void c() {
            }
        });
        localb2.show();
    }
    
    private boolean checkReadPhoneStatePermission() {
        if(a.b(this, "android.permission.READ_PHONE_STATE") != 0) {
            a.a(this, new String[] {"android.permission.READ_PHONE_STATE"}, 0x3e8);
            return false;
        }
        return true;
    }
    
    private boolean checkStoragePermission() {
        if(a.b(this, "android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
            a.a(this, new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"}, 0x7d0);
            return false;
        }
        return true;
    }
    
    public void onRequestPermissionsResult(int p1, String[] p2, int[] p3) {
        if(p3.length < 0x1) {
            showDialog(this, true);
            return;
        }
        switch(p1) {
            case 1000:
            {
                if(p3[0x0] != 0) {
                    showDialog(this, true);
                    return;
                }
                if(checkStoragePermission()) {
                    if(!isHandleGrayStrategy()) {
                        gotoNextActivity();
                    }
                }
                return;
            }
            case 2000:
            {
                if(p3[0x0] != 0) {
                    showDialog(this, false);
                    return;
                }
                if(!isHandleGrayStrategy()) {
                    gotoNextActivity();
                    break;
                }
            }
        }
    }
    
    private void gotoNextActivity() {
        // :( Parsing error. Please contact me.
    }
    
    private void sendSearch(String p1) {
        localconst/41 = RequestFactory.createSearchRequsetNew(p1, 0x0, "txt.android.song", 0x1);
        Network.a().a(0x0, searchListener);
    }
    
    private void handleError() {
        Intent localIntent1 = new Intent(this, MainActivity.class);
        startActivity(localIntent1);
        finish();
    }
    
    private void showSonyAgreement() {
        if(g.f()) {
            if(a.a().O()) {
                localString1 = (ViewStub)findViewById(0x7f120122);
                if(!0x7f120122) {
                    return;
                }
                0x7f120122.setLayoutResource(0x7f04001f);
                0x7f120122.inflate();
                localString2 = (ImageView)findViewById(0x7f120119);
                locallong3 = (TextView)findViewById(0x7f12011c);
                localconst4 = (TextView)findViewById(0x7f12011d);
                locallong5 = (TextView)findViewById(0x7f12011e);
                localResources6 = (TextView)findViewById(0x7f12011f);
                localconst7 = (TextView)findViewById(0x7f12011a);
                localconst8 = (TextView)findViewById(0x7f12011b);
                localconst9 = (ScrollView)findViewById(0x7f12008e);
                0x7f12011b.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(this, 0x7f12011b, 0x7f12008e, 0x7f12011a) {
                    
                    4(AppStarterActivity p1, TextView p2, ScrollView p3, TextView p4) {
                    }
                    
                    public boolean onPreDraw() {
                        try {
                            a.getViewTreeObserver().removeOnPreDrawListener(this);
                        } catch(Exception localString1) {
                            b.b("AppStarterActivity", "removeOnPreDrawListener Exception:" + localString1.getMessage());
                        }
                        if(b.getHeight() != 0) {
                            mTotalNum = ((a.getHeight() / (b.getHeight() - 0x1e)) + 0x1);
                        } else {
                            mTotalNum = 0xf;
                        }
                        c.setText(mCurrentNum + "/" + mTotalNum);
                        return true;
                    }
                });
                0x7f12011c.setOnClickListener(new View.OnClickListener(this, 0x7f120122) {
                    
                    5(AppStarterActivity p1, ViewStub p2) {
                    }
                    
                    public void onClick(View p1) {
                        a.setVisibility(0x4);
                        a.a().m(false);
                        b.startApp();
                    }
                });
                0x7f12011e.setOnClickListener(new View.OnClickListener(this, 0x7f12011b, 0x7f12008e, 0x7f12011a) {
                    
                    6(AppStarterActivity p1, TextView p2, ScrollView p3, TextView p4) {
                    }
                    
                    public void onClick(View p1) {
                        if(a.getMeasuredHeight() > b.getScrollY()) {
                            if(mCurrentNum < mTotalNum) {
                                c.setText(access$1504(d) + "/" + mTotalNum);
                            }
                            b.smoothScrollTo(0x0, ((b.getScrollY() + b.getHeight()) - 0x1e));
                        }
                    }
                });
                0x7f12011f.setOnClickListener(new View.OnClickListener(this, 0x7f12008e, 0x7f12011a) {
                    
                    7(AppStarterActivity p1, ScrollView p2, TextView p3) {
                    }
                    
                    public void onClick(View p1) {
                        if(a.getScrollY() > 0) {
                            if(mCurrentNum > 0x1) {
                                b.setText(access$1506(c) + "/" + mTotalNum);
                            }
                            a.smoothScrollTo(0x0, ((a.getScrollY() - a.getHeight()) + 0x1e));
                        }
                    }
                });
                0x7f12011d.setOnClickListener(new View.OnClickListener(this) {
                    
                    8(AppStarterActivity p1) {
                    }
                    
                    public void onClick(View p1) {
                        a.finish();
                    }
                });
                0x7f12011c.requestFocus();
                locallong3 = System.currentTimeMillis();
                BitmapFactory.Options localString1 = new BitmapFactory.Options();
                localString1.inMutable = true;
                0x7f120119.setImageBitmap(c.a().a(BitmapFactory.decodeResource(getResources(), 0x7f02012b, localString1), 0xa, 0x14));
                b.b("AppStarterActivity", "blur time:" + (System.currentTimeMillis() - 0x7f12011c));
                return;
            }
            startApp();
            return;
        }
        startApp();
    }
    
    protected void onActivityResult(int p1, int p2, Intent p3) {
        super.onActivityResult(p1, p2, p3);
        if(p2 == -0x1) {
            if(p1 == 0x8) {
                b.b("AppStarterActivity", "getUser() : " + (UserManager)UserManager.Companion.getInstance(getApplicationContext()).getUser());
                b.b("AppStarterActivity", "isLoginSuccess : " + isLoginSuccess);
                mUser = (UserManager)UserManager.Companion.getInstance(getApplicationContext()).getUser();
            }
            return;
        }
        if(p2 == 0) {
            b.b("AppStarterActivity", "onActivityResult cancel");
            finish();
            exitApp();
        }
    }
    
    private boolean isHandleGrayStrategy() {
        if(i.a()) {
            b.b("AppStarterActivity", "isHandleGrayStrategy");
            if((UserManager)UserManager.Companion.getInstance(MusicApplication.getContext()).getMusicUin().equals("0")) {
                b.b("AppStarterActivity", "isHandleGrayStrategy USER NULL");
                startLoginActivity();
            }
            return true;
        }
        return false;
    }
    
    private void startLoginActivity() {
        b.b("AppStarterActivity", "startLoginActivity");
        Intent localIntent1 = new Intent();
        localIntent1.setClass(this, LoginActivity.class);
        Bundle localBundle2 = new Bundle();
        localBundle2.putInt("backtype", 0x1);
        localBundle2.putString("activity", "AppStarterActivity");
        localIntent1.putExtras(localBundle2);
        startActivityForResult(localIntent1, 0x8);
    }
    
    private boolean isFitGrey() {
        return a.a().N();
    }
    
    private static void exitApp() {
        (UserManager)UserManager.Companion.getInstance(MusicApplication.getContext()).logoff();
        TinkerApplicationLike.ExitApplication();
    }
    
    private void showDialog() {
        localconst1 = getResources().getString(0x7f0b0976);
        b localb2 = new b(this, 0x7f0b0976, getResources().getString(0x7f0b0943), "", 0x1);
        localb2.a(new b.a(this, localb2) {
            
            9(AppStarterActivity p1, b p2) {
            }
            
            public void a() {
                a.dismiss();
                exitApp();
            }
            
            public void b() {
                a.dismiss();
                exitApp();
            }
            
            public void c() {
                a.dismiss();
                exitApp();
            }
        });
        localb2.show();
    }
}
